# Author: Matthew Harrigan <matthew.harrigan@outlook.com>
# Contributors:
# Copyright (c) 2016, Stanford University
# All rights reserved.


import re
from collections import defaultdict
from datetime import datetime

import nbformat
from jinja2 import Environment, PackageLoader
from nbformat.v4 import new_code_cell, new_markdown_cell, new_notebook

from .io import backup, chmod_plus_x


class ProjectTemplate(object):
    """Construct a set of scripts to serve as a template for a new project.

    Parameters
    ----------
    steps : list of int
        Which steps to write out. If None, write all steps (default)
    ipynb : bool
        Write IPython Notebooks where applicable.

    """


    def __init__(self, steps=None, ipynb=False):
        self.write_funcs = defaultdict(lambda: self.write_generic)
        self.write_funcs.update({
            'py': self.write_python,
            'sh': self.write_shell,
        })

        if ipynb:
            self.write_funcs['py'] = self.write_ipython

        self.steps = steps

    def get_header(self):
        return '\n'.join([
            "msmbuilder autogenerated template version 1",
            'created {}'.format(datetime.now().isoformat()),
            "please cite msmbuilder in any publications"
        ])

    def write_ipython(self, templ_fn, rendered):
        templ_ipynb_fn = templ_fn.replace('.py', '.ipynb')

        cell_texts = [templ_ipynb_fn] + re.split(r'## (.*)\n', rendered)
        cells = []
        for heading, content in zip(cell_texts[:-1:2], cell_texts[1::2]):
            cells += [new_markdown_cell("## " + heading.strip()),
                      new_code_cell(content.strip())]
        nb = new_notebook(
            cells=cells,
            metadata={'kernelspec': {
                'name': 'python3',
                'display_name': 'Python 3'
            }})
        backup(templ_ipynb_fn)
        with open(templ_ipynb_fn, 'w') as f:
            nbformat.write(nb, f)

    def write_python(self, templ_fn, rendered):
        backup(templ_fn)
        with open(templ_fn, 'w') as f:
            f.write(rendered)

    def write_shell(self, templ_fn, rendered):
        backup(templ_fn)
        with open(templ_fn, 'w') as f:
            f.write(rendered)
        chmod_plus_x(templ_fn)

    def write_generic(self, templ_fn, rendered):
        backup(templ_fn)
        with open(templ_fn, 'w') as f:
            f.write(rendered)

    def get_templates(self, fns):
        keys = set((fn.split('.')[0], fn.split('.')[-1]) for fn in fns)
        templates = {}
        for k, ext in keys:
            if self.steps is not None:
                try:
                    step = int(k.split('-')[0])
                except ValueError:
                    continue
                if step not in self.steps:
                    continue

            trial_fn = "{k}.{ext}".format(k=k, ext=ext)
            templates[k, ext] = trial_fn
        return templates

    def render_iter(self):
        env = Environment(loader=PackageLoader('msmbuilder',
                                               'project_templates'))
        templ_dict = self.get_templates(env.list_templates())
        for (k, ext), templ_fn in templ_dict.items():
            template = env.get_template(templ_fn)
            rendered = template.render(
                header=self.get_header(),
                topology_fn='data/fs-peptide.pdb',
                timestep=10,
                date=datetime.now().isoformat(),
            )
            yield k, ext, rendered

    def render_all(self):
        return {"{k}.{ext}".format(k=k, ext=ext): rendered
                for k, ext, rendered in self.render_iter()}

    def write_all(self):
        for k, ext, rendered in self.render_iter():
            out_fn = "{k}.{ext}".format(k=k, ext=ext)
            self.write_funcs[ext](out_fn, rendered)
